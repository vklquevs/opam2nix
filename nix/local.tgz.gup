#!bash
set -eu
# Print the current HEAD or working copy (as a stash)
# (returns the same hash for unchanged content, due to the overridden GIT_* variables below)
# For convenience, this script also acts as a `gup` builder for a .tgz file

# set -x

function get_commit() {
	(
	commit="$(env \
		GIT_AUTHOR_NAME="nobody" \
		GIT_AUTHOR_EMAIL="nobody@example.org" \
		GIT_AUTHOR_DATE='1970-01-01T00:00:00Z' \
		GIT_COMMITTER_NAME="nobody" \
		GIT_COMMITTER_EMAIL="nobody@example.org" \
		GIT_COMMITTER_DATE='1970-01-01T00:00:00Z' \
		git stash create || true)"
	if [ -z "$commit" ]; then
		git rev-parse HEAD
	else
		echo "$commit"
	fi
	)
}

if [ -n "${GUP_TARGET:-}" -a "$#" -eq 2 ] && [[ $2 == *.tgz ]]; then
	src="$(dirname "$2")"
	dest="$(readlink -f "$2")"
	cd "$src"
	cd "$(git rev-parse --show-toplevel)"
	commit="$(get_commit)"
	gup --always
	(echo "$commit"; cat "${BASH_SOURCE[0]}") | gup --contents

	if [ -f "$dest" ] && [ "x$(gunzip -c "$dest" 2>/dev/null | git get-tar-commit-id)" = "x${commit}" ]; then
		# Don't regenerate archive; we just end up with the same contents but different mtimes
		# (https://blog.lnx.cx/2015/05/15/getting-consistent-fingerprints-from-git-archive/)
		cp "$dest" "$1"
	else
		git archive "$commit" --format=tar.gz --prefix="git-export/" > "$1"
	fi
else
	get_commit
fi
